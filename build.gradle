apply plugin: 'com.github.kt3k.coveralls'

buildscript {
    apply from: "${rootDir}/gradle/dependencies.gradle"

    repositories {
        google()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2' }
    }
    dependencies {
        classpath pluginDependencies.gradle
        classpath pluginDependencies.coveralls
        classpath pluginDependencies.errorprone
        classpath pluginDependencies.dependencyUpdates
    }
}

task testReport(type: TestReport, group: 'Build') {
    description = 'Generates an aggregate test report'
    destinationDir = file("${buildDir}/reports/allTests")
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2' }
    }

    group = GROUP
    version = VERSION_NAME
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'net.ltgt.errorprone'
    apply from: "${rootDir}/gradle/dependencies.gradle"

    dependencies {
        errorprone dependenciesList.errorprone
        errorproneJavac dependenciesList.errorproneJavac
    }
    afterEvaluate { project ->
        task sourcesJar(type: Jar) {
            if (pluginManager.hasPlugin('com.android.library')) {
                classifier 'sources'
                from android.sourceSets.main.java.srcDirs
            } else {
                classifier 'sources'
                from sourceSets.main.allSource
            }
        }
        publishing {
            repositories {
                maven {
                    def propsFile = rootProject.file('github.properties')
                    def props = new Properties()
                    props.load(new FileInputStream(propsFile))
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/salemaljebaly/graphhopper-navigation-android")
                    credentials {
                        username props['username']
                        password props['token']
                    }
                }
            }
            publications {
                gpr(MavenPublication) {
                    from components.findByName("release")
                    artifact tasks.sourcesJar

                    def getArtifactPath = { ->
                        def aarPath = "$buildDir/outputs/aar/${project.name}-release.aar"
                        def jarPath = "$buildDir/libs/${project.name}.jar"
                        def isAar = file(aarPath).exists()
                        return isAar ? aarPath : jarPath
                    }

                    groupId project.group
                    artifactId 'salemaljebaly-grahphopper'
                    version '0.0.10'
                    artifact getArtifactPath()

                    pom {
                        name = POM_NAME
                        description = POM_DESCRIPTION
                        url = POM_URL

                        scm {
                            url = POM_SCM_URL
                            connection = POM_SCM_CONNECTION
                            developerConnection = POM_SCM_DEV_CONNECTION
                        }

                        licenses {
                            license {
                                name = POM_LICENCE_NAME
                                url = POM_LICENCE_URL
                            }
                        }

                        developers {
                            developer {
                                id = POM_DEVELOPER_ID
                                name = POM_DEVELOPER_NAME
                            }
                        }

                        withXml {
                            def dependencies = asNode().appendNode('dependencies')
                            configurations.implementation.allDependencies.each {
                                addDependency(dependencies, it).appendNode('scope', 'runtime')
                            }
                            configurations.api.allDependencies.each {
                                addDependency(dependencies, it)
                            }
                        }
                    }
                }
            }
        }
    }

    apply plugin: "maven-publish"
}

private static Object addDependency(Object dependenciesNode, Dependency dependency) {
    def dependencyNode = dependenciesNode.appendNode('dependency')
    dependencyNode.appendNode('groupId', dependency.group)
    dependencyNode.appendNode('artifactId', dependency.name)
    dependencyNode.appendNode('version', dependency.version)
    return dependencyNode
}

private def getShortSha() {
    def stdOut = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdOut
    }
    return "$stdOut".trim().take(7)
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
